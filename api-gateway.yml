eureka:
  instance:
    instance-id: ${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id:${random.value}}}
    lease-renewal-interval-in-seconds: 10 
  client:
    registry-fetch-interval-seconds: 5
  

logging:
  level:
    org:
      springframework:
        security: DEBUG

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: localhost
    protocol: protocol
    port: 8899
    contextPath: userauth

# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
security:
  user:
    password: none
  oauth2:
    client:
      accessTokenUri: ${authserver.protocol}://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: ${authserver.protocol}://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: acme
      clientSecret: acmesecret
      registered-redirect-uri: http://localhost:8765/login
      pre-established-redirect-uri: http://localhost:8765/login
      use-current-uri: false
    resource:
      userInfoUri: ${authserver.protocol}://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/user

# Define the port where the API gateway server would be running
server:
  port: 8765

# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that
# Spring cloud security would need to secure the api gateway before it can route the
# requests using zuul
zuul:
  ignoredServices: '*'
  routes:
    user-service:
      path: /user/**
      stripPrefix: false
      serviceId: user-service
      sensitiveHeaders:
    resource-service:
      path: /resource/**
      stripPrefix: false
      serviceId: resource-service
      sensitiveHeaders:
    user:
      path: /userauth/**
      stripPrefix: false
      serviceId: auth-server
      sensitiveHeaders:

